первая часть XOR с генерируемой последовательностью
Основной подводный камень это то, что LCG немного кривой

static unsigned long int next = 0x1337;

int get_byte(void)
{
  next = next * 1103515245 + 12345;
  return (unsigned int)(next/65536) % 0xff;
};

то есть в конце было деление на константу 255, что не равно операции "& 0xff" которую было бы логично тут использовать.

в исходнике generator.c есть реализация получения 13 рандомных байт

Вторая часть это CRC32 от каждого символа
Третья часть это SHA256 от каждого символа

в скрипте solve.py всё реализовано.