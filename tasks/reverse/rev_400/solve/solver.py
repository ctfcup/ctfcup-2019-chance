from hashlib import sha256

# frist part, XOR with LCG()
ida_chars = [120, 96, 139, 231, 45, 162, 127, 235, 14, 214,  76, 193, 28 ]
rnd_vals = [0x3b,0x15,0xfb,0x9c,0x14,0x94,0x19,0xdb,0x68,0xe6,0x74,0xa2,0x2c] # output of generator.c 

res = ''

for i in range( len( ida_chars ) ):
	res += chr( ida_chars[ i ] ^ rnd_vals[ i ] )


# second part CRC32 of each chars
from crccheck.crc import Crc32Mpeg2
#hex(zlib.crc32(b'hello-world') & 0xffffffff)

valids_crc = [ 
	0x9efbcf93, 0xbc323f9c, 0xbc323f9c, 
	0xeb2f424d, 0xe66c6494, 0x9a3ad224,
	0x893ea4f8, 0xbc323f9c, 0xb8f3222b, 
	0xbc323f9c, 0xefee5ffa, 0xf5681248, 
	0xbc323f9c 
]

for valid in valids_crc:
	for i in range( 0, 256 ):

		if Crc32Mpeg2.calc( bytearray(chr(i) ) ) == valid:
			res += chr( i )
			break

# third part SHA256 of each chars 
valid_hashes = [
	[0x2e,0x7d,0x2c,0x3,0xa9,0x50,0x7a,0xe2,0x65,0xec,0xf5,0xb5,0x35,0x68,0x85,0xa5,0x33,0x93,0xa2,0x2,0x9d,0x24,0x13,0x94,0x99,0x72,0x65,0xa1,0xa2,0x5a,0xef,0xc6],
	[0x2e,0x7d,0x2c,0x3,0xa9,0x50,0x7a,0xe2,0x65,0xec,0xf5,0xb5,0x35,0x68,0x85,0xa5,0x33,0x93,0xa2,0x2,0x9d,0x24,0x13,0x94,0x99,0x72,0x65,0xa1,0xa2,0x5a,0xef,0xc6],
	[0x4b,0x22,0x77,0x77,0xd4,0xdd,0x1f,0xc6,0x1c,0x6f,0x88,0x4f,0x48,0x64,0x1d,0x2,0xb4,0xd1,0x21,0xd3,0xfd,0x32,0x8c,0xb0,0x8b,0x55,0x31,0xfc,0xac,0xda,0xbf,0x8a],
	[0xe7,0xf6,0xc0,0x11,0x77,0x6e,0x8d,0xb7,0xcd,0x33,0xb,0x54,0x17,0x4f,0xd7,0x6f,0x7d,0x2,0x16,0xb6,0x12,0x38,0x7a,0x5f,0xfc,0xfb,0x81,0xe6,0xf0,0x91,0x96,0x83],
	[0xef,0x2d,0x12,0x7d,0xe3,0x7b,0x94,0x2b,0xaa,0xd0,0x61,0x45,0xe5,0x4b,0xc,0x61,0x9a,0x1f,0x22,0x32,0x7b,0x2e,0xbb,0xcf,0xbe,0xc7,0x8f,0x55,0x64,0xaf,0xe3,0x9d],
	[0x2e,0x7d,0x2c,0x3,0xa9,0x50,0x7a,0xe2,0x65,0xec,0xf5,0xb5,0x35,0x68,0x85,0xa5,0x33,0x93,0xa2,0x2,0x9d,0x24,0x13,0x94,0x99,0x72,0x65,0xa1,0xa2,0x5a,0xef,0xc6],
	[0x6b,0x86,0xb2,0x73,0xff,0x34,0xfc,0xe1,0x9d,0x6b,0x80,0x4e,0xff,0x5a,0x3f,0x57,0x47,0xad,0xa4,0xea,0xa2,0x2f,0x1d,0x49,0xc0,0x1e,0x52,0xdd,0xb7,0x87,0x5b,0x4b],
	[0x19,0x58,0x1e,0x27,0xde,0x7c,0xed,0x0,0xff,0x1c,0xe5,0xb,0x20,0x47,0xe7,0xa5,0x67,0xc7,0x6b,0x1c,0xba,0xeb,0xab,0xe5,0xef,0x3,0xf7,0xc3,0x1,0x7b,0xb5,0xb7],
	[0x2e,0x7d,0x2c,0x3,0xa9,0x50,0x7a,0xe2,0x65,0xec,0xf5,0xb5,0x35,0x68,0x85,0xa5,0x33,0x93,0xa2,0x2,0x9d,0x24,0x13,0x94,0x99,0x72,0x65,0xa1,0xa2,0x5a,0xef,0xc6],
	[0x4b,0x22,0x77,0x77,0xd4,0xdd,0x1f,0xc6,0x1c,0x6f,0x88,0x4f,0x48,0x64,0x1d,0x2,0xb4,0xd1,0x21,0xd3,0xfd,0x32,0x8c,0xb0,0x8b,0x55,0x31,0xfc,0xac,0xda,0xbf,0x8a],
	[0xd1,0xb,0x36,0xaa,0x74,0xa5,0x9b,0xcf,0x4a,0x88,0x18,0x58,0x37,0xf6,0x58,0xaf,0xaf,0x36,0x46,0xef,0xf2,0xbb,0x16,0xc3,0x92,0x8d,0xe,0x93,0x35,0xe9,0x45,0xd2]
]

def make_hash( _list ):
	_hash = ''

	for i in _list:
		new_elem = hex( i )

		if len( new_elem ) == 3:
			_hash += '0' + new_elem[ 2: ]
		else:
			_hash += new_elem[ 2: ]

	return _hash


for elem in valid_hashes:

	_hex_hash = make_hash( elem )

	for i in range( 0, 256 ):

		if sha256( chr( i ) ).hexdigest() == _hex_hash:
			res += chr( i )
			break 

print "flag: " + res
